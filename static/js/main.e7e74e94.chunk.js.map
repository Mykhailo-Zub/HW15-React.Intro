{"version":3,"sources":["img/confirm.svg","img/down-arrow.svg","img/comment.svg","img/share.svg","img/like.svg","img/upload.svg","components/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","props","className","style","backgroundImage","author","photo","name","src","confirmImg","alt","nickname","date","downArrowImg","content","image","commentImg","shareImg","likeImg","uploadImg","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,uOCkD5BC,EA1CF,SAACC,GACV,OACI,yBAAKC,UAAU,gBACX,yBACIA,UAAU,SACVC,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAMI,OAAOC,MAAtB,QAE5B,yBAAKJ,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QAAQD,EAAMI,OAAOE,MACpC,yBAAKC,IAAKC,IAAYC,IAAI,GAAGR,UAAU,YACvC,yBAAKA,UAAU,YAAYD,EAAMI,OAAOM,UACxC,yBAAKT,UAAU,QACf,yBAAKA,UAAU,QAAQD,EAAMW,MAC7B,yBAAKV,UAAU,aAAaM,IAAKK,IAAcH,IAAI,MAEvD,yBAAKR,UAAU,WAAWD,EAAMa,SAChC,yBAAKZ,UAAU,eACX,yBAAKM,IAAKP,EAAMc,MAAOL,IAAI,MAE/B,yBAAKR,UAAU,eACX,6BACI,yBAAKM,IAAKQ,IAAYN,IAAI,KAC1B,qCAEJ,6BACI,yBAAKF,IAAKS,IAAUP,IAAI,KACxB,oCAEJ,6BACI,yBAAKF,IAAKU,IAASR,IAAI,KACvB,sCAEJ,6BACI,yBAAKF,IAAKW,IAAWT,IAAI,UChBlCU,MAjBf,WACI,OACI,6BACI,kBAAC,EAAD,CACIf,OAAQ,CACJE,KAAM,mBACND,MAXhB,6FAYgBK,SAAU,eAEdG,QAAQ,kDACRC,MAZZ,gGAaYH,KAAM,mCCRFS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7e74e94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/confirm.39726703.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.da333812.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment.0002e5f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/share.444db246.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.12220a22.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.8f047106.svg\";","import React from \"react\";\r\nimport confirmImg from \"../img/confirm.svg\";\r\nimport downArrowImg from \"../img/down-arrow.svg\";\r\nimport commentImg from \"../img/comment.svg\";\r\nimport shareImg from \"../img/share.svg\";\r\nimport likeImg from \"../img/like.svg\";\r\nimport uploadImg from \"../img/upload.svg\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className=\"post-wrapper\">\r\n            <div\r\n                className=\"avatar\"\r\n                style={{ backgroundImage: `url(${props.author.photo})` }}\r\n            ></div>\r\n            <div className=\"content-column\">\r\n                <div className=\"name-row\">\r\n                    <div className=\"name\">{props.author.name}</div>\r\n                    <img src={confirmImg} alt=\"\" className=\"confirm\" />\r\n                    <div className=\"nickname\">{props.author.nickname}</div>\r\n                    <div className=\"dot\"></div>\r\n                    <div className=\"date\">{props.date}</div>\r\n                    <img className=\"more-arrow\" src={downArrowImg} alt=\"\" />\r\n                </div>\r\n                <div className=\"content\">{props.content}</div>\r\n                <div className=\"content-img\">\r\n                    <img src={props.image} alt=\"\" />\r\n                </div>\r\n                <div className=\"social-btns\">\r\n                    <div>\r\n                        <img src={commentImg} alt=\"\" />\r\n                        <span>34</span>\r\n                    </div>\r\n                    <div>\r\n                        <img src={shareImg} alt=\"\" />\r\n                        <span>8</span>\r\n                    </div>\r\n                    <div>\r\n                        <img src={likeImg} alt=\"\" />\r\n                        <span>165</span>\r\n                    </div>\r\n                    <div>\r\n                        <img src={uploadImg} alt=\"\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\nimport Post from \"./components/post\";\n\nconst ANAKIN_IMAGE =\n    \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\n\nconst RAY_IMAGE =\n    \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\nfunction App() {\n    return (\n        <div>\n            <Post\n                author={{\n                    name: \"Anakin Skywalker\",\n                    photo: ANAKIN_IMAGE,\n                    nickname: \"@dart_vader\",\n                }}\n                content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n                image={RAY_IMAGE}\n                date={\"26 февр.\"}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}